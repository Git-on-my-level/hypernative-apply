name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

env:
  NODE_VERSION: '18.x'

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get-version
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Check if prerelease
      id: check-prerelease
      run: |
        VERSION=${{ steps.get-version.outputs.version }}
        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release"
        else
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a prerelease"
        fi
    
    - name: Validate package.json version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION=${{ steps.get-version.outputs.version }}
        
        if [[ "$PACKAGE_VERSION" != "$TAG_VERSION" ]]; then
          echo "‚ùå Version mismatch!"
          echo "package.json version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          exit 1
        fi
        
        echo "‚úÖ Version validation passed: $PACKAGE_VERSION"

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run full test suite
      run: npm run test:ci
    
    - name: Build for production
      run: npm run build
    
    - name: Test CLI installation
      run: |
        npm pack
        PACKAGE=$(ls *.tgz)
        npm install -g "./$PACKAGE"
        
        # Test CLI works
        hypernative --version
        hypernative --help
        
        echo "‚úÖ CLI installation test passed"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          bin/
          package.json
          *.tgz
        retention-days: 30

  e2e-validation:
    name: E2E Validation for Release
    runs-on: ubuntu-latest
    needs: validate-tag
    if: needs.validate-tag.outputs.is-prerelease == 'false'
    
    steps:
    - name: Trigger E2E tests
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: run-e2e-tests
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "release": true}'
    
    - name: Wait for E2E completion
      uses: fountainhead/action-wait-for-check@v1.1.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'E2E Smoke Tests'
        ref: ${{ github.sha }}
        timeoutSeconds: 1800  # 30 minutes

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "Generating changelog since $PREVIOUS_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          echo "No previous tag found, generating changelog from all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        # Save changelog to file for the release
        cat > CHANGELOG.md << EOF
        ## Changes in v${{ needs.validate-tag.outputs.version }}
        
        $CHANGELOG
        
        ## Installation
        
        \`\`\`bash
        npm install -g hypernative@${{ needs.validate-tag.outputs.version }}
        \`\`\`
        
        ## Docker
        
        \`\`\`bash
        docker pull hypernative/cli:${{ needs.validate-tag.outputs.version }}
        \`\`\`
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        prerelease: ${{ needs.validate-tag.outputs.is-prerelease }}
        draft: false
        files: |
          *.tgz
          dist/**/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test, create-release]
    if: github.repository == 'your-org/hypernative-apply' # Replace with actual repo
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Publish to NPM (prerelease)
      if: needs.validate-tag.outputs.is-prerelease == 'true'
      run: npm publish --tag beta
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Publish to NPM (stable)
      if: needs.validate-tag.outputs.is-prerelease == 'false'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        registry: docker.io
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: hypernative/cli
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [validate-tag, publish-npm]
    if: needs.validate-tag.outputs.is-prerelease == 'false'
    
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v2
      with:
        formula-name: hypernative
        homebrew-tap: your-org/homebrew-tap  # Replace with actual tap
        download-url: https://registry.npmjs.org/hypernative/-/hypernative-${{ needs.validate-tag.outputs.version }}.tgz
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release, publish-npm]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success' && needs.publish-npm.result == 'success'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"üöÄ Successfully released hypernative-apply v${{ needs.validate-tag.outputs.version }}\",
            \"attachments\": [{
              \"color\": \"good\",
              \"fields\": [{
                \"title\": \"Version\",
                \"value\": \"v${{ needs.validate-tag.outputs.version }}\",
                \"short\": true
              }, {
                \"title\": \"Type\",
                \"value\": \"${{ needs.validate-tag.outputs.is-prerelease == 'true' && 'Prerelease' || 'Stable Release' }}\",
                \"short\": true
              }, {
                \"title\": \"NPM\",
                \"value\": \"<https://www.npmjs.com/package/hypernative|View Package>\",
                \"short\": true
              }, {
                \"title\": \"GitHub\",
                \"value\": \"<${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate-tag.outputs.version }}|View Release>\",
                \"short\": true
              }]
            }]
          }" \
          $SLACK_WEBHOOK_URL
    
    - name: Notify failure
      if: needs.create-release.result == 'failure' || needs.publish-npm.result == 'failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"‚ùå Release failed for hypernative-apply v${{ needs.validate-tag.outputs.version }}\",
            \"attachments\": [{
              \"color\": \"danger\",
              \"fields\": [{
                \"title\": \"Version\",
                \"value\": \"v${{ needs.validate-tag.outputs.version }}\",
                \"short\": true
              }, {
                \"title\": \"Workflow\",
                \"value\": \"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\",
                \"short\": true
              }]
            }]
          }" \
          $SLACK_WEBHOOK_URL