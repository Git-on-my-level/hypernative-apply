name: E2E Tests

on:
  # Triggered by the main CI workflow on main branch
  repository_dispatch:
    types: [run-e2e-tests]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  
  # Nightly schedule
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'

jobs:
  e2e-smoke:
    name: E2E Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.test_environment || 'staging' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Use the specific commit if triggered by repository_dispatch
        ref: ${{ github.event.client_payload.ref || github.ref }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run E2E smoke tests
      env:
        E2E: '1'
        HYPERNATIVE_API_URL: ${{ secrets.HYPERNATIVE_API_URL }}
        HYPERNATIVE_API_KEY: ${{ secrets.HYPERNATIVE_API_KEY }}
        E2E_SLACK_WEBHOOK_URL: ${{ secrets.E2E_SLACK_WEBHOOK_URL }}
        NODE_ENV: 'test'
      run: npm run test:e2e:smoke
      timeout-minutes: 15
    
    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-artifacts-${{ matrix.environment }}
        path: |
          test-workspace-*/
          *.log
        retention-days: 7
    
    - name: Cleanup test resources
      if: always()
      env:
        HYPERNATIVE_API_URL: ${{ secrets.HYPERNATIVE_API_URL }}
        HYPERNATIVE_API_KEY: ${{ secrets.HYPERNATIVE_API_KEY }}
      run: |
        # Run cleanup script if it exists
        if [ -f "scripts/cleanup-e2e-resources.sh" ]; then
          chmod +x scripts/cleanup-e2e-resources.sh
          ./scripts/cleanup-e2e-resources.sh
        fi

  e2e-full:
    name: Full E2E Test Suite
    runs-on: ubuntu-latest
    needs: e2e-smoke
    if: github.event_name == 'schedule' || github.event.inputs.test_environment == 'staging'
    timeout-minutes: 45
    
    environment: ${{ github.event.inputs.test_environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.client_payload.ref || github.ref }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run full E2E test suite
      env:
        E2E: '1'
        HYPERNATIVE_API_URL: ${{ secrets.HYPERNATIVE_API_URL }}
        HYPERNATIVE_API_KEY: ${{ secrets.HYPERNATIVE_API_KEY }}
        E2E_SLACK_WEBHOOK_URL: ${{ secrets.E2E_SLACK_WEBHOOK_URL }}
        E2E_EMAIL_SMTP_HOST: ${{ secrets.E2E_EMAIL_SMTP_HOST }}
        E2E_EMAIL_SMTP_USER: ${{ secrets.E2E_EMAIL_SMTP_USER }}
        E2E_EMAIL_SMTP_PASS: ${{ secrets.E2E_EMAIL_SMTP_PASS }}
        NODE_ENV: 'test'
      run: npm run test:e2e
      timeout-minutes: 40
    
    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-full-test-artifacts
        path: |
          test-workspace-*/
          *.log
          coverage/
        retention-days: 14
    
    - name: Cleanup test resources
      if: always()
      env:
        HYPERNATIVE_API_URL: ${{ secrets.HYPERNATIVE_API_URL }}
        HYPERNATIVE_API_KEY: ${{ secrets.HYPERNATIVE_API_KEY }}
      run: |
        if [ -f "scripts/cleanup-e2e-resources.sh" ]; then
          chmod +x scripts/cleanup-e2e-resources.sh
          ./scripts/cleanup-e2e-resources.sh
        fi

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-smoke
    if: github.event_name == 'schedule'
    timeout-minutes: 30
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run performance tests
      env:
        E2E: '1'
        HYPERNATIVE_API_URL: ${{ secrets.HYPERNATIVE_API_URL }}
        HYPERNATIVE_API_KEY: ${{ secrets.HYPERNATIVE_API_KEY }}
        NODE_ENV: 'test'
      run: |
        # Run performance-focused E2E tests
        npx vitest run tests/e2e/ --testNamePattern="performance|large|concurrent" || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: |
          performance-*.json
          benchmark-*.log
        retention-days: 30

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [e2e-smoke, e2e-full]
    if: always()
    
    steps:
    - name: Send notification on failure
      if: needs.e2e-smoke.result == 'failure' || needs.e2e-full.result == 'failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"❌ E2E tests failed for hypernative-apply CLI\",
            \"attachments\": [{
              \"color\": \"danger\",
              \"fields\": [{
                \"title\": \"Repository\",
                \"value\": \"${{ github.repository }}\",
                \"short\": true
              }, {
                \"title\": \"Branch/Commit\",
                \"value\": \"${{ github.ref_name }}@${{ github.sha }}\",
                \"short\": true
              }, {
                \"title\": \"Environment\",
                \"value\": \"${{ github.event.inputs.test_environment || 'staging' }}\",
                \"short\": true
              }, {
                \"title\": \"Workflow\",
                \"value\": \"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\",
                \"short\": true
              }]
            }]
          }" \
          $SLACK_WEBHOOK_URL
    
    - name: Send notification on success
      if: needs.e2e-smoke.result == 'success' && (needs.e2e-full.result == 'success' || needs.e2e-full.result == 'skipped')
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"✅ E2E tests passed for hypernative-apply CLI\",
            \"attachments\": [{
              \"color\": \"good\",
              \"fields\": [{
                \"title\": \"Repository\",
                \"value\": \"${{ github.repository }}\",
                \"short\": true
              }, {
                \"title\": \"Environment\",
                \"value\": \"${{ github.event.inputs.test_environment || 'staging' }}\",
                \"short\": true
              }]
            }]
          }" \
          $SLACK_WEBHOOK_URL

  # Create GitHub issue on persistent failures
  create-issue-on-failure:
    name: Create Issue on Persistent Failure
    runs-on: ubuntu-latest
    needs: [e2e-smoke]
    if: failure() && github.event_name == 'schedule'
    
    steps:
    - name: Create issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `E2E Tests Failing - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## E2E Test Failure Report
          
          **Date**: ${new Date().toISOString()}
          **Workflow**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
          **Branch**: ${context.ref}
          **Commit**: ${context.sha}
          
          ### Failed Jobs
          - E2E Smoke Tests: ${{ needs.e2e-smoke.result }}
          
          ### Action Required
          - [ ] Investigate test failure logs
          - [ ] Check API endpoint availability
          - [ ] Verify test environment configuration
          - [ ] Fix identified issues
          - [ ] Re-run tests to verify fix
          
          ### Test Environment
          Environment: staging
          API URL: ${process.env.HYPERNATIVE_API_URL ? 'configured' : 'not configured'}
          
          ---
          *This issue was automatically created by GitHub Actions*
          `;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['e2e-failure', 'automated']
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('E2E Tests Failing') && 
            issue.created_at > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'e2e-failure', 'automated', 'priority-high']
            });
            console.log('Created new issue for E2E test failure');
          } else {
            console.log('Similar issue already exists, skipping creation');
          }