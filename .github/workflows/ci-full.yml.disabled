name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Check formatting
      run: npm run format:check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run unit tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        delete-old-comments: true

  golden-tests:
    name: Golden Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run golden tests
      run: npm run test:golden
    
    - name: Upload golden test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: golden-test-diffs
        path: tests/fixtures/golden/
        retention-days: 7

  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x']
        exclude:
          # Reduce CI load - only test Node 18 on Windows/macOS
          - os: windows-latest
            node-version: '20.x'
          - os: macos-latest
            node-version: '20.x'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Test CLI functionality (Unix)
      if: runner.os != 'Windows'
      run: |
        node dist/index.js --version
        node dist/index.js --help
    
    - name: Test CLI functionality (Windows)
      if: runner.os == 'Windows'
      run: |
        node dist/index.js --version
        node dist/index.js --help

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Run dependency vulnerability check
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install and run npm-audit-resolver
      run: |
        npm install -g npm-audit-resolver
        npm audit --json | npm-audit-resolver --fix

  coverage-check:
    name: Coverage Requirements
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run coverage check
      run: |
        npm run test:coverage
        # The vitest config enforces coverage thresholds
        echo "✅ Coverage requirements met"

# E2E tests run on schedule and can be triggered manually
# They require real API credentials so they're in a separate workflow
  trigger-e2e:
    name: Trigger E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, build-and-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Trigger E2E workflow
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: run-e2e-tests
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

# Summary job that depends on all other jobs
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, golden-tests, build-and-test, security-audit, coverage-check]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.golden-tests.result }}" == "success" && \
              "${{ needs.build-and-test.result }}" == "success" && \
              "${{ needs.security-audit.result }}" == "success" && \
              "${{ needs.coverage-check.result }}" == "success" ]]; then
          echo "✅ All CI jobs passed!"
          exit 0
        else
          echo "❌ Some CI jobs failed"
          echo "lint-and-format: ${{ needs.lint-and-format.result }}"
          echo "unit-tests: ${{ needs.unit-tests.result }}"
          echo "golden-tests: ${{ needs.golden-tests.result }}"
          echo "build-and-test: ${{ needs.build-and-test.result }}"
          echo "security-audit: ${{ needs.security-audit.result }}"
          echo "coverage-check: ${{ needs.coverage-check.result }}"
          exit 1
        fi